let nextStoriesExecuted = !1;
function next_stories() {
  var StoriesSlide = (function () {
    function t(t, e, s, n, i) {
      void 0 === n && (n = 5000);
      void 0 === i && (i = "none");
      this.container = t;
      this.elements = e;
      this.controls = s;
      this.time = n;
      this.timeout = null;
      this.pausedTimeout = null;
      this.index = 0;
      this.slide = this.elements[this.index];
      this.paused = !1;
      this.thumbItems = null;
      this.thumb = null;
      this.ease = i;
      this.elements.forEach(function (element) {
        element.setAttribute("inert", "");
      });
      this.init();
    }
    t.prototype.hide = function (t) {
      t.classList.remove("active");
      if (t instanceof HTMLVideoElement) {
        t.pause();
        t.muted = !0;
        t.currentTime = 0;
      }
    };
    t.prototype.show = function (t) {
      var e = this;
      this.index = t;
      this.slide = this.elements[this.index];
      if (this.thumbItems) {
        this.thumb = this.thumbItems[this.index];
        this.thumbItems.forEach(function (t) {
          return t.classList.remove("active");
        });
        this.thumb.classList.add("active");
      }
      this.elements.forEach(function (t) {
        return e.hide(t);
      });
      this.slide.classList.add("active");
      if (this.thumb) {
        var duration = this.slide.querySelector("video")
          ? this.slide.querySelector("video").duration
          : this.time / 1000;
        if (!this.thumb.timeline) {
          this.thumb.timeline = gsap.timeline({ paused: !0 });
          this.thumb.timeline.fromTo(
            this.thumb,
            { x: "-100%" },
            { duration: duration, x: "0%", ease: this.ease }
          );
        }
        this.thumb.timeline.restart();
      }
      var video = this.slide.querySelector("video");
      if (video) {
        video.controls = !1;
        video.currentTime = 0;
        video.play();
        this.auto(video.duration * 1000);
        this.controls.addEventListener("pointerdown", () => {
          video.pause();
          if (this.thumb && this.thumb.timeline) {
            this.thumb.timeline.pause();
          }
        });
        this.controls.addEventListener("pointerup", () => {
          video.play();
          if (this.thumb && this.thumb.timeline) {
            this.thumb.timeline.play();
          }
        });
      } else {
        this.auto(this.time);
      }
    };
    t.prototype.auto = function (t) {
      var e,
        s = this;
      null === (e = this.timeout) || void 0 === e || e.clear();
      this.timeout = new StoriesTimeout(function () {
        return s.next();
      }, t);
    };
    t.prototype.prev = function () {
      if (!this.paused) {
        var t = this.index - 1 >= 0 ? this.index - 1 : this.elements.length - 1;
        this.show(t);
      }
    };
    t.prototype.next = function () {
      if (!this.paused) {
        var t = this.index + 1 < this.elements.length ? this.index + 1 : 0;
        this.show(t);
      }
    };
    t.prototype.pause = function () {
      var t = this;
      window.oncontextmenu = function () {
        return !1;
      };
      this.pausedTimeout = new StoriesTimeout(function () {
        var e, s;
        null === (e = t.timeout) || void 0 === e || e.pause();
        t.paused = !0;
        null === (s = t.thumb) || void 0 === s || s.classList.add("paused");
        if (t.thumb) {
          t.thumb.timeline.pause();
        }
        if (t.slide instanceof HTMLVideoElement) {
          t.slide.pause();
        }
      }, 300);
    };
    t.prototype.continue = function () {
      var t, e, s;
      null === (t = this.pausedTimeout) || void 0 === t || t.clear();
      if (this.paused) {
        this.paused = !1;
        null === (e = this.timeout) || void 0 === e || e.continue();
        null === (s = this.thumb) ||
          void 0 === s ||
          s.classList.remove("paused");
        if (this.thumb) {
          this.thumb.timeline.play();
        }
        if (this.slide instanceof HTMLVideoElement) {
          this.slide.play();
        }
      }
    };
    t.prototype.addControl = function () {
      var t = this;
      var e = document.createElement("button");
      var s = document.createElement("button");
      e.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
          t.prev();
        }
      });
      s.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
          t.next();
        }
      });
      this.controls.appendChild(e);
      this.controls.appendChild(s);
      this.controls.addEventListener("pointerdown", function () {
        return t.pause();
      });
      document.addEventListener("pointerup", function () {
        return t.continue();
      });
      document.addEventListener("touchend", function () {
        return t.continue();
      });
      e.addEventListener("pointerup", function () {
        return t.prev();
      });
      s.addEventListener("pointerup", function () {
        return t.next();
      });
    };
    t.prototype.addThumbItems = function () {
      this.thumbItems = Array.from(
        this.container.querySelectorAll(".thumb-item")
      );
    };
    t.prototype.init = function () {
      this.addControl();
      this.addThumbItems();
      this.show(this.index);
    };
    return t;
  })();
  var StoriesTimeout = (function () {
    function t(t, e) {
      this.id = setTimeout(t, e);
      this.handler = t;
      this.start = Date.now();
      this.timeLeft = e;
    }
    t.prototype.clear = function () {
      clearTimeout(this.id);
    };
    t.prototype.pause = function () {
      var t = Date.now() - this.start;
      this.timeLeft = this.timeLeft - t;
      this.clear();
    };
    t.prototype.continue = function () {
      this.clear();
      this.id = setTimeout(this.handler, this.timeLeft);
      this.start = Date.now();
    };
    return t;
  })();
  var isBricks = window.location.href.includes("brickspreview");
  document.querySelectorAll(".nb-stories").forEach((container) => {
    container.removeAttribute("data-flickering");
    if (
      isBricks &&
      container.getAttribute("data-disable-builder").includes("1")
    ) {
      return;
    }
    var elements = container.querySelector(".nb-stories__container");
    var controls = container.querySelector(".nb-stories__controls");
    var thumbContainer = controls.querySelector(".nb-stories__controls-thumb");
    thumbContainer.innerHTML = "";
    const stories = elements.querySelectorAll(".nb-stories__story");
    stories.forEach(() => {
      let span = document.createElement("span");
      let thumb = document.createElement("span");
      thumb.classList.add("thumb-item");
      span.appendChild(thumb);
      thumbContainer.appendChild(span);
    });
    var duration = parseFloat(container.getAttribute("data-duration")) * 1000;
    var ease = container.getAttribute("data-ease");
    if (container && elements && controls && stories.length) {
      new StoriesSlide(container, stories, controls, duration, ease);
    }
  });
}
document.addEventListener("DOMContentLoaded", function (t) {
  if (bricksIsFrontend) {
    next_stories();
  }
});

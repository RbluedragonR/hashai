var doneSwapReading = !1;
function next_swap_reading() {
  if (doneSwapReading) return;
  function createSplitText(el) {
    const paragraph = el.querySelector(".next-swap-reading__paragraph");
    const split = new SplitText(paragraph, {
      type: "lines",
      linesClass: "split-line",
    });
    paragraph.innerHTML = "";
    split.lines.forEach((line) => {
      const lineWrapper = document.createElement("div");
      lineWrapper.className = "next-swap-reading__line";
      const originalLine = document.createElement("div");
      originalLine.className = "next-swap-reading__original-line";
      originalLine.textContent = line.textContent;
      const maskLine = document.createElement("div");
      maskLine.className = "next-swap-reading__mask-line";
      maskLine.textContent = line.textContent;
      lineWrapper.appendChild(originalLine);
      lineWrapper.appendChild(maskLine);
      paragraph.appendChild(lineWrapper);
    });
    return split;
  }
  document.querySelectorAll(".next-swap-reading").forEach((el) => {
    let split = createSplitText(el);
    window.addEventListener("resize", () => {
      split.revert();
      split = createSplitText(el);
    });
    let start = el.getAttribute("data-start");
    let end = el.getAttribute("data-end");
    let duration = el.getAttribute("data-duration");
    let ease = el.getAttribute("data-ease");
    let scroller = el.getAttribute("data-scroller");
    const lines = el.querySelectorAll(".next-swap-reading__line");
    lines.forEach((line) => {
      ScrollTrigger.create({
        trigger: line,
        start: start,
        end: end,
        scrub: !0,
        scroller: scroller,
        onUpdate: (self) => {
          gsap.to(line.querySelector(".next-swap-reading__original-line"), {
            y: `${-100 * self.progress}%`,
            duration: parseFloat(duration),
            ease: ease,
          });
          gsap.to(line.querySelector(".next-swap-reading__mask-line"), {
            y: `${-100 * self.progress}%`,
            duration: parseFloat(duration),
            ease: ease,
          });
        },
      });
    });
  });
  doneSwapReading = !0;
}
document.addEventListener("DOMContentLoaded", function (t) {
  document.fonts.ready.then(function () {
    bricksIsFrontend && next_swap_reading();
  });
});

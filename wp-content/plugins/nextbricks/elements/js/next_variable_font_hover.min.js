function next_variable_font_hover() {
  class TextAnimation {
    constructor(selector, config) {
      this.text =
        typeof selector === "string"
          ? document.querySelector(selector)
          : selector;
      this.splitText = new SplitText(this.text, { type: config.splitType });
      this.direction = config.direction;
      this.config = {
        enterWeight: config.enterWeight,
        leaveWeight: config.leaveWeight,
        skewEnter: config.skewEnter,
        skewLeave: config.skewLeave,
        duration: config.duration,
        staggerEach: config.staggerEach,
        splitType: config.splitType,
        ease: config.ease,
      };
      this.bindEvents();
    }
    bindEvents() {
      this.text.addEventListener("mouseenter", () => {
        gsap.to(this.splitText[this.config.splitType], {
          fontWeight: this.config.enterWeight,
          skewX: this.config.skewEnter,
          duration: this.config.duration,
          stagger: {
            each: this.config.staggerEach,
            from:
              this.direction === "right"
                ? "end"
                : this.direction === "left"
                ? "start"
                : this.direction,
          },
          ease: this.config.ease,
        });
      });
      this.text.addEventListener("mouseleave", () => {
        gsap.to(this.splitText[this.config.splitType], {
          fontWeight: this.config.leaveWeight,
          skewX: this.config.skewLeave,
          duration: this.config.duration,
          stagger: {
            each: this.config.staggerEach,
            from:
              this.direction === "right"
                ? "end"
                : this.direction === "left"
                ? "start"
                : this.direction,
          },
          ease: this.config.ease,
        });
      });
    }
    getSplitElements() {
      return this.splitText[this.config.splitType];
    }
  }
  document
    .querySelectorAll(".next-variable-font-hover__text")
    .forEach((variableFontHover) => {
      new TextAnimation(variableFontHover, {
        enterWeight: parseFloat(
          variableFontHover.getAttribute("data-enter-weight")
        ),
        leaveWeight: parseFloat(
          variableFontHover.getAttribute("data-leave-weight")
        ),
        skewEnter: parseFloat(
          variableFontHover.getAttribute("data-skew-enter")
        ),
        skewLeave: parseFloat(
          variableFontHover.getAttribute("data-skew-leave")
        ),
        duration: parseFloat(variableFontHover.getAttribute("data-duration")),
        staggerEach: parseFloat(
          variableFontHover.getAttribute("data-stagger-each")
        ),
        direction: variableFontHover.getAttribute("data-direction"),
        ease: variableFontHover.getAttribute("data-ease"),
        splitType: variableFontHover.getAttribute("data-split-type"),
      });
    });
}
document.addEventListener("DOMContentLoaded", function (t) {
  document.fonts.ready.then(function () {
    bricksIsFrontend && next_variable_font_hover();
  });
});

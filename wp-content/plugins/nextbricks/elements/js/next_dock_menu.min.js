function setDockHeight(element) {
  const realHeight = Math.max(
    element.scrollHeight,
    element.offsetHeight,
    element.clientHeight
  );
  element.style.height = `${realHeight}px`;
}
function next_dock_menu() {
  const { createApp, Events, Utils } = Veloxi;
  function createNextBricksDock(customScale, activationDistance, baseSize) {
    const NextBricksDock = (context) => {
      let items;
      let root;
      context.subscribeToEvents((eventBus) => {
        eventBus.subscribeToEvent(Events.PointerMoveEvent, onMouseMove);
      });
      function onMouseMove(event) {
        if (!root.intersects(event.x, event.y)) {
          items.forEach((item) => {
            item.size.reset();
          });
          return;
        }
        items.forEach((item) => {
          const currentSize = parseFloat(
            getComputedStyle(item.element).getPropertyValue("--dimensions")
          );
          const scaledActivationDistance =
            activationDistance * (currentSize / 40);
          const progress = Utils.pointToViewProgress(
            { x: event.x, y: event.y },
            item,
            scaledActivationDistance
          );
          const scale = Utils.remap(progress, 0, 1, 1, customScale);
          item.size.set({
            width: currentSize * scale,
            height: currentSize * scale,
          });
        });
      }
      context.setup(() => {
        root = context.getView("root");
        items = context.getViews("item");
        items.forEach((item) => {
          item.size.setAnimator("dynamic");
          item.origin.set({ x: 0.5, y: 1 });
        });
      });
    };
    NextBricksDock.pluginName = "NextBricksDock";
    return NextBricksDock;
  }
  document.querySelectorAll(".next-dock-menu").forEach((dockMenu) => {
    const baseSize = parseFloat(dockMenu.getAttribute("data-base-size"));
    const customScale = parseFloat(dockMenu.getAttribute("data-scale"));
    const activationDistance = parseFloat(
      dockMenu.getAttribute("data-activation-distance")
    );
    setDockHeight(dockMenu);
    const app = createApp();
    const NextBricksDockPlugin = createNextBricksDock(
      customScale,
      activationDistance,
      baseSize
    );
    app.addPlugin(NextBricksDockPlugin);
    app.run(dockMenu);
  });
}
document.addEventListener("DOMContentLoaded", function (t) {
  if (bricksIsFrontend) {
    next_dock_menu();
    window.addEventListener("resize", () => {
      document.querySelectorAll(".next-dock-menu").forEach(setDockHeight);
    });
  }
});

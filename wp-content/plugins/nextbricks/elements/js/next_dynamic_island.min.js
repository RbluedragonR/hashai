function next_dynamic_island() {
  var isBricks = window.location.href.includes("brickspreview");
  document.querySelectorAll(".nb-dynamic-island").forEach((island) => {
    if (!island.hasAttribute("data-flickering")) {
      return;
    }
    island.removeAttribute("data-flickering");
    const openAtBuilder = parseFloat(
      island.getAttribute("data-open-at-builder")
    );
    const selector = island.getAttribute("data-selector");
    const scrollMarginTop = island.getAttribute("data-scroll-margin-top");
    const expandWidth = island.getAttribute("data-expand-width");
    const dimensionsDuration = island.getAttribute("data-dimensions-duration");
    const dimensionsEase = island.getAttribute("data-dimensions-ease");
    const overlayOpacityDuration = island.getAttribute(
      "data-overlay-opacity-duration"
    );
    const overlayOpacityEase = island.getAttribute("data-overlay-opacity-ease");
    const linksContainerOpacityDuration = island.getAttribute(
      "data-links-container-opacity-duration"
    );
    const linksContainerOpacityEase = island.getAttribute(
      "data-links-container-opacity-ease"
    );
    const linksWrapperDirection = island.getAttribute(
      "data-links-wrapper-direction"
    );
    let initialValues = [];
    if (selector != "") {
      document.querySelectorAll(selector).forEach((item) => {
        item.style.scrollMarginTop = scrollMarginTop;
      });
      initialValues = Array.from(document.querySelectorAll(selector)).map(
        (item) => ({ title: item.textContent, link: `#${item.id}` })
      );
    }
    const dynamicIsland = island.querySelector(".nb-dynamic-island__container");
    const overlay = island.querySelector(".nb-dynamic-island__overlay");
    const linksContainer = island.querySelector(".nb-dynamic-island__nav");
    const progressCircle = island.querySelector(
      ".nb-dynamic-island__progress-bar"
    );
    const percentageText = island.querySelector(
      ".nb-dynamic-island__percentage"
    );
    let isOpen = !1;
    let lastInsertedLink = null;
    initialValues.forEach((item) => {
      const link = document.createElement("a");
      link.href = item.link;
      link.textContent = item.title;
      link.className = "nb-dynamic-island__link";
      const wrapper = island.querySelector(".nb-dynamic-island__nav-wrapper");
      if (linksWrapperDirection == "column-reverse") {
        wrapper.appendChild(link);
        lastInsertedLink = link;
      } else if (linksWrapperDirection == "column") {
        if (lastInsertedLink) {
          wrapper.insertBefore(link, lastInsertedLink.nextSibling);
        } else {
          wrapper.insertBefore(link, wrapper.firstChild);
        }
        lastInsertedLink = link;
      }
    });
    const tl = gsap.timeline({ paused: !0 });
    tl.to(dynamicIsland, {
      width: expandWidth,
      duration: parseFloat(dimensionsDuration),
      ease: dimensionsEase,
    })
      .to(
        linksContainer,
        {
          height: "auto",
          duration: parseFloat(dimensionsDuration),
          ease: dimensionsEase,
        },
        `-=${parseFloat(dimensionsDuration)}`
      )
      .to(
        overlay,
        {
          opacity: 1,
          pointerEvents: "auto",
          duration: parseFloat(overlayOpacityDuration),
          ease: overlayOpacityEase,
        },
        `-=${parseFloat(overlayOpacityDuration)}`
      )
      .to(
        linksContainer,
        {
          opacity: 1,
          pointerEvents: "auto",
          duration: parseFloat(linksContainerOpacityDuration),
          ease: linksContainerOpacityEase,
        },
        `-=${parseFloat(linksContainerOpacityDuration)}`
      );
    function updateClasses(isOpen) {
      dynamicIsland.classList.toggle("open", isOpen);
      dynamicIsland.classList.toggle("close", !isOpen);
    }
    updateClasses(isOpen);
    function toggleIsland(open) {
      if (open) {
        tl.play();
        dynamicIsland.setAttribute("aria-expanded", "true");
        island.querySelectorAll(".nb-dynamic-island__link").forEach((link) => {
          link.tabIndex = 0;
        });
      } else {
        tl.reverse();
        dynamicIsland.setAttribute("aria-expanded", "false");
        island.querySelectorAll(".nb-dynamic-island__link").forEach((link) => {
          link.tabIndex = -1;
        });
      }
      isOpen = open;
      updateClasses(isOpen);
    }
    island.querySelectorAll(".nb-dynamic-island__link").forEach((link) => {
      link.tabIndex = -1;
    });
    if (isBricks && openAtBuilder === 1) {
      toggleIsland(!0);
      dynamicIsland.removeEventListener("click", toggleIsland);
      overlay.removeEventListener("click", () => toggleIsland(!1));
      document.removeEventListener("keydown", (e) => {
        if (e.key === "Escape" && isOpen) {
          toggleIsland(!1);
        }
      });
    } else {
      dynamicIsland.addEventListener("click", (e) => {
        if (
          e.target.closest(".nb-dynamic-island__link") ||
          e.target.closest(".nb-dynamic-island__nav")
        )
          return;
        toggleIsland(!isOpen);
      });
      overlay.addEventListener("click", () => {
        toggleIsland(!1);
      });
    }
    dynamicIsland.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        if (e.target.href && e.target.getAttribute("href").startsWith("#")) {
          e.preventDefault();
          toggleIsland(!isOpen);
        } else if (!e.target.href) {
          e.preventDefault();
          toggleIsland(!isOpen);
        }
      }
    });
    overlay.addEventListener("click", () => {
      toggleIsland(!1);
    });
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && isOpen) {
        toggleIsland(!1);
        dynamicIsland.focus();
      }
    });
    function updateProgress(animate = !1) {
      const scrollHeight =
        document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercentage = Math.min(
        100,
        Math.max(0, (window.scrollY / scrollHeight) * 100)
      );
      if (animate) {
        progressCircle.classList.add("animate");
      } else {
        progressCircle.classList.remove("animate");
      }
      progressCircle.style.strokeDashoffset =
        251.2 * (1 - scrollPercentage / 100);
      percentageText.textContent = `${Math.round(scrollPercentage)}%`;
    }
    updateProgress(!1);
    setTimeout(() => {
      window.addEventListener("scroll", () => updateProgress(!0));
    }, 100);
    island.querySelectorAll(".nb-dynamic-island__link").forEach((link) => {
      link.addEventListener("click", (e) => {
        const href = link.getAttribute("href");
        if (href.startsWith("#")) {
          e.preventDefault();
          const targetId = href.slice(1);
          const targetElement = document.getElementById(targetId);
          targetElement.scrollIntoView({ behavior: "smooth" });
          toggleIsland(!1);
        }
      });
      link.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          const href = link.getAttribute("href");
          if (href.startsWith("#")) {
            e.preventDefault();
            const targetId = href.slice(1);
            const targetElement = document.getElementById(targetId);
            targetElement.scrollIntoView({ behavior: "smooth" });
            toggleIsland(!0);
            dynamicIsland.focus();
          }
        }
      });
    });
  });
}
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && next_dynamic_island();
});

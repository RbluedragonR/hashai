function next_tiles() {
  document.querySelectorAll(".next-tiles").forEach((tiles) => {
    const contentNew = tiles.querySelector(".next-tiles__content-new");
    if (contentNew) {
      const content = tiles.querySelector(".next-tiles__content");
      if (content) {
        tiles.replaceChild(contentNew, content);
      }
    }
    tiles.removeAttribute("data-flickering");
    const squaresLayout = tiles.querySelector(".next-tiles__squares-layout");
    const tilesRect = tiles.getBoundingClientRect();
    const tilesWidth = tilesRect.width;
    const tilesHeight = tilesRect.height;
    const targetWidth = tilesWidth * 2;
    const targetHeight = tilesHeight * 2;
    const squareSize = parseFloat(tiles.getAttribute("data-square-dimensions"));
    const numCols = Math.ceil(targetWidth / squareSize);
    const numRows = Math.ceil(targetHeight / squareSize);
    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        const square = document.createElement("div");
        square.classList.add("next-tiles__square");
        square.style.width = `${squareSize}px`;
        square.style.height = `${squareSize}px`;
        square.style.left = `${j * squareSize}px`;
        square.style.top = `${i * squareSize}px`;
        squaresLayout.appendChild(square);
      }
    }
    let currentSquare = null;
    function applyMouseLeaveAnimation(square) {
      if (!square) return;
      square.classList.remove("next-tiles__square--mouseenter");
      square.classList.add("next-tiles__square--mouseleave");
      setTimeout(() => {
        square.classList.remove("next-tiles__square--mouseleave");
      }, 100);
    }
    function findSquareAtPosition(x, y) {
      const elements = document.elementsFromPoint(x, y);
      return elements.find(
        (element) =>
          element.classList.contains("next-tiles__square") &&
          element.closest(".next-tiles") === tiles
      );
    }
    tiles.addEventListener("mousemove", (e) => {
      const square = findSquareAtPosition(e.clientX, e.clientY);
      if (square !== currentSquare) {
        if (currentSquare) {
          applyMouseLeaveAnimation(currentSquare);
        }
        if (square) {
          square.classList.add("next-tiles__square--mouseenter");
        }
        currentSquare = square;
      }
    });
    tiles.addEventListener("mouseleave", () => {
      if (currentSquare) {
        applyMouseLeaveAnimation(currentSquare);
        currentSquare = null;
      }
    });
  });
}
document.addEventListener("DOMContentLoaded", function (t) {
  if (typeof bricksIsFrontend !== "undefined" && bricksIsFrontend) {
    next_tiles();
  }
});

function next_site_loader() {
  var cameFromInternalLink = document.referrer.startsWith(
    window.location.origin
  );
  var isPageReload =
    document.referrer === "" || document.referrer === window.location.href;
  var isHardLoaded =
    !cameFromInternalLink || isPageReload || performance.navigation.type === 1;
  var siteLoader = document.querySelector(".nb-site-loader");
  if (!siteLoader) return;
  if (!window.location.href.includes("brickspreview") && isHardLoaded) {
    var type = siteLoader.getAttribute("data-type");
    var siteLoaderDuration = parseFloat(
      siteLoader.getAttribute("data-min-duration")
    );
    switch (type) {
      case "type1":
        siteLoaderType1(siteLoader, siteLoaderDuration);
        break;
      case "type2":
        siteLoaderType2(siteLoader, siteLoaderDuration);
        break;
      case "type3":
        siteLoaderType3(siteLoader, siteLoaderDuration);
        break;
      case "type4":
        siteLoaderType4(siteLoader, siteLoaderDuration);
        break;
      case "type5":
        siteLoaderType5(siteLoader, siteLoaderDuration);
        break;
      case "type6":
        siteLoaderType6(siteLoader, siteLoaderDuration);
        break;
      case "type7":
        siteLoaderType7(siteLoader, siteLoaderDuration);
        break;
      case "type8":
        siteLoaderType8(siteLoader, siteLoaderDuration);
        break;
      case "type9":
        siteLoaderType9(siteLoader, siteLoaderDuration);
        break;
      case "type10":
        siteLoaderType10(siteLoader);
        break;
      case "type11":
        siteLoaderType11(siteLoader, siteLoaderDuration);
        break;
      case "type12":
        siteLoaderType12(siteLoader, siteLoaderDuration);
        break;
    }
  } else {
    var siteLoader = document.querySelector(".nb-site-loader");
    var isBuilder = window.location.href.includes("brickspreview");
    var disableBuilder = siteLoader.getAttribute("data-disable-builder");
    if (isBuilder && disableBuilder.includes("1")) {
      document.querySelector(".nb-site-loader").style.display = "none";
    } else if (!isBuilder) {
      document.querySelector(".nb-site-loader").style.display = "none";
    }
    runScripts();
  }
  function siteLoaderType1(siteLoader, siteLoaderDuration) {
    var swapDuration = parseFloat(
      siteLoader.getAttribute("data-swap-duration")
    );
    var swapEase = siteLoader.getAttribute("data-swap-ease");
    var swapStagger = parseFloat(siteLoader.getAttribute("data-swap-stagger"));
    var progressBarEase = siteLoader.getAttribute("data-progress-bar-ease");
    var slideDuration = parseFloat(
      siteLoader.getAttribute("data-slide-duration")
    );
    var slideEase = siteLoader.getAttribute("data-slide-ease");
    var slideDelay = parseFloat(siteLoader.getAttribute("data-slide-delay"));
    const loadingText = new SplitText(
      ".nb-site-loader--type1__loading-text--initial",
      { type: "chars" }
    );
    const completeText = new SplitText(
      ".nb-site-loader--type1__loading-text--complete",
      { type: "chars" }
    );
    gsap.set(".nb-site-loader--type1__loading-text--complete", { y: "100%" });
    gsap.set(loadingText.chars, { opacity: 0, y: 100 });
    gsap.set(completeText.chars, { opacity: 0, y: 100 });
    gsap.to(loadingText.chars, {
      opacity: 1,
      y: 0,
      duration: swapDuration,
      stagger: swapStagger,
      ease: swapEase,
    });
    const tl = gsap.timeline();
    tl.to(".nb-site-loader--type1__progress-bar", {
      width: "100%",
      duration: siteLoaderDuration,
      ease: progressBarEase,
      onUpdate: function () {
        const progress = Math.round(this.progress() * 100);
        document.querySelector(
          ".nb-site-loader--type1__percentage"
        ).textContent = progress;
      },
    })
      .to(loadingText.chars, {
        y: "-100%",
        duration: swapDuration,
        stagger: swapStagger,
        ease: swapEase,
      })
      .to(
        ".nb-site-loader--type1__loading-text--complete",
        { y: "0%", duration: swapDuration, ease: swapEase },
        "<"
      )
      .to(
        completeText.chars,
        {
          opacity: 1,
          y: 0,
          duration: swapDuration,
          stagger: swapStagger,
          ease: swapEase,
        },
        "<0.2"
      )
      .to(".nb-site-loader--type1", {
        y: "-100svh",
        duration: slideDuration,
        ease: slideEase,
        delay: slideDelay,
      })
      .set(".nb-site-loader--type1", {
        display: "none",
        onComplete: () => {
          runScripts();
        },
      });
  }
  function siteLoaderType2(siteLoader, siteLoaderDuration) {
    var progressBarEase = siteLoader.getAttribute("data-progress-bar-ease");
    var slideDuration = parseFloat(
      siteLoader.getAttribute("data-slide-duration")
    );
    var slideEase = siteLoader.getAttribute("data-slide-ease");
    var slideDelay = parseFloat(siteLoader.getAttribute("data-slide-delay"));
    var percentageEase = siteLoader.getAttribute("data-percentage-ease");
    const getXPosition = () => {
      const wrap = document.querySelector(
        ".nb-site-loader--type2__percentage-wrap"
      );
      const percentage = document.querySelector(
        ".nb-site-loader--type2__percentage--calc-100"
      );
      return wrap.offsetWidth - percentage.offsetWidth;
    };
    const tl = gsap.timeline();
    tl.to(".nb-site-loader--type2__progress-bar", {
      width: "100%",
      duration: siteLoaderDuration,
      ease: progressBarEase,
      onUpdate: function () {
        const progress = Math.round(this.progress() * 100);
        document.querySelector(
          ".nb-site-loader--type2__percentage--display"
        ).textContent = progress;
      },
      onStart: () => {
        gsap.set(".nb-site-loader--type2__percentage--display", { x: 0 });
      },
    })
      .to(
        ".nb-site-loader--type2__percentage--display",
        { x: getXPosition, duration: siteLoaderDuration, ease: percentageEase },
        "<0"
      )
      .to(".nb-site-loader--type2", {
        y: "-100svh",
        duration: slideDuration,
        ease: slideEase,
        delay: slideDelay,
      })
      .set(".nb-site-loader--type2", {
        display: "none",
        onComplete: () => {
          runScripts();
        },
      });
    window.addEventListener("resize", () => {
      const progress =
        gsap.getProperty(".nb-site-loader--type2__progress-bar", "width", "%") /
        100;
      const newX = getXPosition() * progress;
      gsap.set(".nb-site-loader--type2__percentage--display", { x: newX });
    });
  }
  function siteLoaderType3(siteLoader, siteLoaderDuration) {
    const tl = gsap.timeline();
    const terminalElement = document.querySelector(
      ".nb-site-loader--type3__terminal"
    );
    var translateCommandsFrom = parseFloat(
      siteLoader.getAttribute("data-translate-commands-from")
    );
    var commandsDuration = parseFloat(
      siteLoader.getAttribute("data-commands-duration")
    );
    var commandsEase = siteLoader.getAttribute("data-commands-ease");
    var terminalFinishScale = parseFloat(
      siteLoader.getAttribute("data-terminal-finish-scale")
    );
    var terminalScaleDuration = parseFloat(
      siteLoader.getAttribute("data-terminal-scale-duration")
    );
    var terminalScaleEase = siteLoader.getAttribute("data-terminal-scale-ease");
    var exitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-exit-fade-duration")
    );
    var exitFadeEase = siteLoader.getAttribute("data-exit-fade-ease");
    gsap.set(".nb-site-loader--type3__command-line", {
      opacity: 0,
      y: translateCommandsFrom,
    });
    const padNumber = (num) => num.toString().padStart(2, "0");
    const updateCursor = (activeCommandId) => {
      document
        .querySelectorAll(".nb-site-loader--type3__cursor")
        .forEach((cursor) => {
          cursor.classList.remove("nb-site-loader--type3__cursor--active");
        });
      const activeCursor = document.querySelector(
        `.nb-site-loader--type3__command-line--${activeCommandId} .nb-site-loader--type3__cursor`
      );
      if (activeCursor) {
        activeCursor.classList.add("nb-site-loader--type3__cursor--active");
      }
    };
    tl.to(".nb-site-loader--type3__command-line--1", {
      opacity: 1,
      y: 0,
      duration: commandsDuration,
      ease: commandsEase,
      onComplete: () => updateCursor("1"),
    })
      .to(".nb-site-loader--type3__loading-progress", {
        width: "100%",
        duration: siteLoaderDuration,
        ease: "none",
        onUpdate: function () {
          const progress = Math.round(this.progress() * 100);
          document.querySelector(
            ".nb-site-loader--type3__percentage"
          ).textContent = `${padNumber(progress)}%`;
          if (progress < 20) {
            updateCursor("1");
          } else if (progress < 50) {
            updateCursor("2");
          } else if (progress < 80) {
            updateCursor("3");
          } else {
            updateCursor("4");
          }
          if (progress >= 20 && progress < 21) {
            gsap.to(".nb-site-loader--type3__command-line--2", {
              opacity: 1,
              y: 0,
              duration: commandsDuration,
              ease: commandsEase,
            });
          }
          if (progress >= 50 && progress < 51) {
            gsap.to(".nb-site-loader--type3__command-line--3", {
              opacity: 1,
              y: 0,
              duration: commandsDuration,
              ease: commandsEase,
            });
          }
          if (progress >= 80 && progress < 81) {
            gsap.to(".nb-site-loader--type3__command-line--4", {
              opacity: 1,
              y: 0,
              duration: commandsDuration,
              ease: commandsEase,
            });
          }
        },
      })
      .to(terminalElement, {
        duration: terminalScaleDuration,
        opacity: 0,
        scale: terminalFinishScale,
        ease: terminalScaleEase,
      })
      .to(".nb-site-loader--type3", {
        duration: exitFadeDuration,
        opacity: 0,
        ease: exitFadeEase,
      })
      .set(".nb-site-loader--type3", {
        display: "none",
        onComplete: () => {
          runScripts();
        },
      });
  }
  function siteLoaderType4(siteLoader, siteLoaderDuration) {
    var maskTop = document.querySelector(".nb-site-loader--type4__mask-top");
    var maskBottom = document.querySelector(
      ".nb-site-loader--type4__mask-bottom"
    );
    var container = document.querySelector(".nb-site-loader--type4__container");
    var progressBar = document.querySelector(
      ".nb-site-loader--type4__progress-bar"
    );
    var counter = document.querySelector(".nb-site-loader--type4__counter");
    var initialLoadingDuration = parseFloat(
      siteLoader.getAttribute("data-initial-loading-duration")
    );
    var initialLoadingEase = siteLoader.getAttribute(
      "data-initial-loading-ease"
    );
    var initialLoadingDelay = parseFloat(
      siteLoader.getAttribute("data-initial-loading-delay")
    );
    var progressEase = siteLoader.getAttribute("data-progress-ease");
    var exitSlidesDuration = parseFloat(
      siteLoader.getAttribute("data-exit-slides-duration")
    );
    var exitSlidesEase = siteLoader.getAttribute("data-exit-slides-ease");
    const tl = gsap.timeline();
    tl.to(container, {
      clipPath: "polygon(0% 45%, 25% 45%, 25% 55%, 0% 55%)",
      duration: initialLoadingDuration,
      ease: initialLoadingEase,
      delay: initialLoadingDelay,
    });
    tl.to(container, {
      clipPath: "polygon(0% 45%, 100% 45%, 100% 55%, 0% 55%)",
      duration: siteLoaderDuration,
      ease: progressEase,
      onStart: () => {
        gsap.to(progressBar, {
          width: "100vw",
          duration: siteLoaderDuration,
          ease: progressEase,
        });
        gsap.to(counter, {
          innerHTML: 100,
          duration: siteLoaderDuration,
          ease: progressEase,
          snap: { innerHTML: 1 },
        });
      },
    });
    tl.to(maskTop, {
      transform: "translateY(-100%)",
      duration: exitSlidesDuration,
      ease: exitSlidesEase,
      onStart: () => {
        gsap.to(maskBottom, {
          transform: "translateY(100%)",
          duration: exitSlidesDuration,
          ease: exitSlidesEase,
        });
        gsap.to(container, { display: "none", duration: 0 });
        gsap.to(siteLoader, {
          display: "none",
          duration: 0,
          delay: exitSlidesDuration,
          onComplete: () => {
            runScripts();
          },
        });
      },
    });
  }
  function siteLoaderType5(siteLoader, siteLoaderDuration) {
    function startLoader() {
      let counterElement = document.querySelector(
        ".nb-site-loader--type5__count span"
      );
      let currentValue = 0;
      let startTime = Date.now();
      let duration = siteLoaderDuration * 1000;
      function updateCounter() {
        let elapsedTime = Date.now() - startTime;
        let progress = Math.min(elapsedTime / duration, 1);
        currentValue = Math.floor(progress * 100);
        counterElement.textContent = currentValue;
        if (progress < 1) {
          requestAnimationFrame(updateCounter);
        }
      }
      updateCounter();
    }
    startLoader();
    var countExitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-count-exit-fade-duration")
    );
    var countExitFadeEase = siteLoader.getAttribute(
      "data-count-exit-fade-ease"
    );
    var swapDuration = parseFloat(
      siteLoader.getAttribute("data-swap-duration")
    );
    var swapEase = siteLoader.getAttribute("data-swap-ease");
    var swapStagger = parseFloat(siteLoader.getAttribute("data-swap-stagger"));
    var loaderScale = parseFloat(siteLoader.getAttribute("data-loader-scale"));
    var loaderScaleDuration = parseFloat(
      siteLoader.getAttribute("data-loader-scale-duration")
    );
    var loaderScaleEase = siteLoader.getAttribute("data-loader-scale-ease");
    var exitSlidesDuration = parseFloat(
      siteLoader.getAttribute("data-exit-slides-duration")
    );
    var exitSlidesEase = siteLoader.getAttribute("data-exit-slides-ease");
    gsap.to(".nb-site-loader--type5__count", {
      opacity: 0,
      delay: siteLoaderDuration,
      duration: countExitFadeDuration,
      ease: countExitFadeEase,
    });
    let textWrapper = document.querySelector(".nb-site-loader--type5__ml16");
    textWrapper.innerHTML = textWrapper.textContent.replace(
      /\S/g,
      "<span class='nb-site-loader--type5__letter'>$&</span>"
    );
    gsap
      .timeline({ repeat: 0 })
      .to(".nb-site-loader--type5__ml16 .nb-site-loader--type5__letter", {
        y: 0,
        duration: swapDuration,
        ease: swapEase,
        stagger: swapStagger,
      })
      .to(".nb-site-loader--type5__ml16 .nb-site-loader--type5__letter", {
        y: "150%",
        duration: swapDuration,
        ease: swapEase,
        stagger: swapStagger,
        delay: siteLoaderDuration - swapDuration,
      });
    gsap.to(".nb-site-loader--type5__pre-loader", {
      scale: loaderScale,
      ease: loaderScaleEase,
      duration: loaderScaleDuration,
      delay: siteLoaderDuration,
    });
    gsap.to(".nb-site-loader--type5__loader", {
      height: "0",
      ease: exitSlidesEase,
      duration: exitSlidesDuration,
      delay: siteLoaderDuration + 0.75,
    });
    gsap.to(".nb-site-loader--type5__loader-bg", {
      height: "0",
      ease: exitSlidesEase,
      duration: exitSlidesDuration,
      delay: siteLoaderDuration + 1,
      onComplete: () => {
        gsap.to(siteLoader, {
          display: "none",
          duration: 0,
          onComplete: () => {
            runScripts();
          },
        });
      },
    });
    gsap.to(".nb-site-loader--type5__loader-2", {
      clipPath: "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
      ease: exitSlidesEase,
      duration: exitSlidesDuration,
      delay: siteLoaderDuration + 0.5,
    });
  }
  function siteLoaderType6(siteLoader, siteLoaderDuration) {
    const counter3 = siteLoader.querySelector(
      ".nb-site-loader--type6__counter-3"
    );
    for (let i = 0; i < 2; i++) {
      for (let j = 0; j < 10; j++) {
        const div = document.createElement("div");
        div.className = "nb-site-loader--type6__num";
        div.textContent = j;
        counter3.appendChild(div);
      }
    }
    const finalDiv = document.createElement("div");
    finalDiv.className = "nb-site-loader--type6__num";
    finalDiv.textContent = "0";
    counter3.appendChild(finalDiv);
    function animate(counter, duration, delay = 0) {
      const numHeight = counter.querySelector(
        ".nb-site-loader--type6__num"
      ).clientHeight;
      const totalDistance =
        (counter.querySelectorAll(".nb-site-loader--type6__num").length - 1) *
        numHeight;
      gsap.to(counter, {
        y: -totalDistance,
        duration: duration,
        delay: delay,
        ease: "power2.inOut",
      });
    }
    animate(counter3, siteLoaderDuration);
    animate(
      document.querySelector(".nb-site-loader--type6__counter-2"),
      siteLoaderDuration * 1.2
    );
    animate(
      document.querySelector(".nb-site-loader--type6__counter-1"),
      siteLoaderDuration * 0.4,
      siteLoaderDuration * 0.8
    );
    var exitCounterSwapDuration = parseFloat(
      siteLoader.getAttribute("data-exit-counter-swap-duration")
    );
    var exitCounterSwapEase = siteLoader.getAttribute(
      "data-exit-counter-swap-ease"
    );
    var exitCounterSwapStagger = parseFloat(
      siteLoader.getAttribute("data-exit-counter-swap-stagger")
    );
    var exitType = siteLoader.getAttribute("data-exit-type");
    var exitTypeDuration = parseFloat(
      siteLoader.getAttribute("data-exit-type-duration")
    );
    var exitTypeEase = siteLoader.getAttribute("data-exit-type-ease");
    if (exitType === "toTop") {
      var varTransform = "translateY(-100svh)";
    } else if (exitType === "toBottom") {
      var varTransform = "translateY(100svh)";
    } else if (exitType === "toLeft") {
      var varTransform = "translateX(-100svw)";
    } else if (exitType === "toRight") {
      var varTransform = "translateX(100svw)";
    }
    gsap.to(".nb-site-loader--type6__digit", {
      top: "-1.5em",
      stagger: exitCounterSwapStagger,
      duration: exitCounterSwapDuration,
      ease: exitCounterSwapEase,
      delay: siteLoaderDuration * 1.2,
    });
    gsap.to(siteLoader, {
      transform: varTransform,
      duration: exitTypeDuration,
      delay: siteLoaderDuration * 1.3,
      ease: exitTypeEase,
      onComplete: () => {
        gsap.to(siteLoader, {
          display: "none",
          duration: 0,
          onComplete: () => {
            runScripts();
          },
        });
      },
    });
  }
  function siteLoaderType7(siteLoader, siteLoaderDuration) {
    var progressEase = siteLoader.getAttribute("data-progress-ease");
    var barScale = parseFloat(siteLoader.getAttribute("data-bar-scale"));
    var barScaleDuration = parseFloat(
      siteLoader.getAttribute("data-bar-scale-duration")
    );
    var barScaleEasing = siteLoader.getAttribute("data-bar-scale-easing");
    var exitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-exit-fade-duration")
    );
    var exitFadeEasing = siteLoader.getAttribute("data-exit-fade-easing");
    gsap.to(".nb-site-loader--type7__loader-1", {
      width: "100%",
      duration: siteLoaderDuration,
      ease: progressEase,
    });
    gsap.to(".nb-site-loader--type7__loader", {
      scale: barScale,
      duration: barScaleDuration,
      delay: siteLoaderDuration * 1.16,
      ease: barScaleEasing,
    });
    gsap.to(".nb-site-loader--type7", {
      opacity: 0,
      duration: exitFadeDuration,
      delay: siteLoaderDuration * 1.2,
      ease: exitFadeEasing,
      onComplete: () => {
        gsap.to(siteLoader, {
          display: "none",
          duration: 0,
          onComplete: () => {
            runScripts();
          },
        });
      },
    });
  }
  function siteLoaderType8(siteLoader, siteLoaderDuration) {
    var counterElement = document.querySelector(
      ".nb-site-loader--type8__counter"
    );
    var updateCounterTimeout;
    function startLoader() {
      var currentValue = 0;
      var targetValue = 100;
      function updateCounter() {
        if (currentValue >= targetValue) {
          return;
        }
        if (currentValue < 75) {
          currentValue += Math.floor(Math.random() * 10) + 1;
        } else if (currentValue < 100) {
          currentValue += Math.floor(Math.random() * 2) + 1;
        }
        if (currentValue > targetValue) {
          currentValue = targetValue;
        }
        counterElement.textContent = currentValue;
        var delay =
          currentValue < 75
            ? Math.floor(Math.random() * 200) + 50
            : Math.floor(Math.random() * 400) + 100;
        updateCounterTimeout = setTimeout(updateCounter, delay);
      }
      updateCounter();
    }
    startLoader();
    var barsDuration = parseFloat(
      siteLoader.getAttribute("data-bars-duration")
    );
    var barsEase = siteLoader.getAttribute("data-bars-ease");
    var barsStagger = parseFloat(siteLoader.getAttribute("data-bars-stagger"));
    var counterExitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-counter-exit-fade-duration")
    );
    var counterExitFadeEase = siteLoader.getAttribute(
      "data-counter-exit-fade-ease"
    );
    let barsTimeline = gsap.timeline({ repeat: -1 });
    barsTimeline
      .to(".nb-site-loader--type8__bar", barsDuration, {
        height: 0,
        stagger: barsStagger,
        ease: barsEase,
      })
      .to(".nb-site-loader--type8__bar", barsDuration, {
        height: "105svh",
        stagger: barsStagger,
        ease: barsEase,
      });
    gsap.delayedCall(siteLoaderDuration, () => {
      const currentProgress = barsTimeline.progress();
      const isFirstHalf = currentProgress < 0.5;
      if (currentProgress > 0 && currentProgress < 1) {
        const checkCompletion = () => {
          const progress = barsTimeline.progress();
          if (progress === 0 || progress === 1) {
            barsTimeline.pause();
            barsTimeline.eventCallback("onUpdate", null);
            finalAnimation();
          } else {
            barsTimeline.eventCallback("onUpdate", checkCompletion);
          }
        };
        barsTimeline.eventCallback("onUpdate", checkCompletion);
      } else {
        barsTimeline.pause();
        finalAnimation();
      }
    });
    function finalAnimation() {
      clearTimeout(updateCounterTimeout);
      gsap.set(".nb-site-loader--type8", { backgroundColor: "transparent" });
      gsap.to(counterElement, {
        textContent: 100,
        duration: 0.5,
        ease: "expo",
        onUpdate: function () {
          counterElement.textContent = Math.round(
            this.targets()[0].textContent
          );
        },
        onComplete: function () {
          gsap.to(".nb-site-loader--type8__counter", counterExitFadeDuration, {
            opacity: 0,
            ease: counterExitFadeEase,
          });
          gsap.to(".nb-site-loader--type8__bar", barsDuration, {
            height: 0,
            stagger: barsStagger,
            ease: barsEase,
            onComplete: () => {
              gsap.to(siteLoader, {
                display: "none",
                duration: 0,
                onComplete: () => {
                  runScripts();
                },
              });
            },
          });
        },
      });
    }
  }
  function siteLoaderType9(siteLoader, siteLoaderDuration) {
    var counterElement = document.querySelector(
      ".nb-site-loader--type9__counter"
    );
    var updateCounterTimeout;
    function startLoader() {
      var currentValue = 0;
      var targetValue = 100;
      function updateCounter() {
        if (currentValue >= targetValue) {
          return;
        }
        if (currentValue < 75) {
          currentValue += Math.floor(Math.random() * 10) + 1;
        } else if (currentValue < 100) {
          currentValue += Math.floor(Math.random() * 2) + 1;
        }
        if (currentValue > targetValue) {
          currentValue = targetValue;
        }
        counterElement.textContent = currentValue;
        var delay =
          currentValue < 75
            ? Math.floor(Math.random() * 200) + 50
            : Math.floor(Math.random() * 400) + 100;
        updateCounterTimeout = setTimeout(updateCounter, delay);
      }
      updateCounter();
    }
    startLoader();
    var barsDuration = parseFloat(
      siteLoader.getAttribute("data-bars-duration")
    );
    var barsEase = siteLoader.getAttribute("data-bars-ease");
    var barsStagger = parseFloat(siteLoader.getAttribute("data-bars-stagger"));
    var counterExitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-counter-exit-fade-duration")
    );
    var counterExitFadeEase = siteLoader.getAttribute(
      "data-counter-exit-fade-ease"
    );
    let barsTimeline = gsap.timeline({ repeat: -1 });
    barsTimeline
      .to(".nb-site-loader--type9__bar", barsDuration, {
        scaleX: 0,
        stagger: barsStagger,
        ease: barsEase,
      })
      .to(".nb-site-loader--type9__bar", barsDuration, {
        scaleX: 1,
        stagger: barsStagger,
        ease: barsEase,
      });
    gsap.delayedCall(siteLoaderDuration, () => {
      const currentProgress = barsTimeline.progress();
      const isFirstHalf = currentProgress < 0.5;
      if (currentProgress > 0 && currentProgress < 1) {
        const checkCompletion = () => {
          const progress = barsTimeline.progress();
          if (progress === 0 || progress === 1) {
            barsTimeline.pause();
            barsTimeline.eventCallback("onUpdate", null);
            finalAnimation();
          } else {
            barsTimeline.eventCallback("onUpdate", checkCompletion);
          }
        };
        barsTimeline.eventCallback("onUpdate", checkCompletion);
      } else {
        barsTimeline.pause();
        finalAnimation();
      }
    });
    function finalAnimation() {
      clearTimeout(updateCounterTimeout);
      var exitDirection = siteLoader.getAttribute("data-exit-direction");
      if (exitDirection === "top") {
        gsap.set(".nb-site-loader--type9__overlay", {
          flexDirection: "column-reverse",
        });
      } else if (exitDirection === "bottom") {
        gsap.set(".nb-site-loader--type9__overlay", {
          flexDirection: "column",
        });
      }
      gsap.set(".nb-site-loader--type9__bar", {
        width: "100svw",
        height: "var(--bars-exit-height)",
      });
      gsap.set(".nb-site-loader--type9", { backgroundColor: "transparent" });
      gsap.to(counterElement, {
        textContent: 100,
        duration: 0.5,
        ease: "expo",
        onUpdate: function () {
          counterElement.textContent = Math.round(
            this.targets()[0].textContent
          );
        },
        onComplete: function () {
          gsap.to(".nb-site-loader--type9__counter", counterExitFadeDuration, {
            opacity: 0,
            ease: counterExitFadeEase,
          });
          gsap.to(".nb-site-loader--type9__bar", barsDuration, {
            scaleY: 0,
            stagger: barsStagger,
            ease: barsEase,
            onComplete: () => {
              gsap.to(siteLoader, {
                display: "none",
                duration: 0,
                onComplete: () => {
                  runScripts();
                },
              });
            },
          });
        },
      });
    }
  }
  function siteLoaderType10(siteLoader) {
    const wrappers = document.querySelectorAll(
      ".nb-site-loader--type10__image-wrapper"
    );
    const finalWrapper = document.querySelector(
      ".nb-site-loader--type10__image-wrapper:last-child"
    );
    const finalImage = finalWrapper.querySelector("img");
    var imgRevealDuration = parseFloat(
      siteLoader.getAttribute("data-img-reveal-duration")
    );
    var imgRevealEase = siteLoader.getAttribute("data-img-reveal-ease");
    var imgRevealStagger = parseFloat(
      siteLoader.getAttribute("data-img-reveal-stagger")
    );
    var imgScaleDuration = parseFloat(
      siteLoader.getAttribute("data-img-scale-duration")
    );
    var imgScaleEase = siteLoader.getAttribute("data-img-scale-ease");
    var pauseAfterZoom = parseFloat(
      siteLoader.getAttribute("data-pause-after-zoom")
    );
    gsap.set("html", { overflow: "hidden" });
    var mainTl = gsap.timeline();
    wrappers.forEach((wrapper, index) => {
      if (index > 0) {
        mainTl.add("image" + index, "<" + imgRevealStagger);
      }
      mainTl.to(
        wrapper,
        {
          clipPath: "inset(0% 0 0 0)",
          duration: imgRevealDuration,
          ease: imgRevealEase,
        },
        index > 0 ? "image" + index : 0
      );
    });
    mainTl.add("pauseBeforeZoom", ">" + pauseAfterZoom);
    mainTl.add("finalAnimation", "pauseBeforeZoom");
    mainTl.add(() => {
      const rect = finalWrapper.getBoundingClientRect();
      const startX = rect.left;
      const startY = rect.top;
      const startWidth = rect.width;
      const startHeight = rect.height;
      gsap.set(".nb-site-loader--type10__preloader-container", {
        overflow: "visible",
      });
      gsap.set(finalWrapper, {
        top: "50%",
        left: "50%",
        xPercent: -50,
        yPercent: -50,
        width: "100svw",
        height: "100svh",
      });
      const newRect = finalWrapper.getBoundingClientRect();
      const endX = newRect.left;
      const endY = newRect.top;
      const endWidth = newRect.width;
      const endHeight = newRect.height;
      const xDiff = startX - endX;
      const yDiff = startY - endY;
      const widthRatio = startWidth / endWidth;
      const heightRatio = startHeight / endHeight;
      gsap.set(finalWrapper, {
        x: xDiff,
        y: yDiff,
        scaleX: widthRatio,
        scaleY: heightRatio,
        transformOrigin: "top left",
      });
      gsap.to(finalWrapper, {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1,
        duration: imgScaleDuration,
        ease: imgScaleEase,
      });
      gsap.to(finalImage, {
        scale: 1.0,
        duration: imgScaleDuration,
        ease: imgScaleEase,
        onComplete: () => {
          gsap.set("html", { overflow: "auto" });
          runScripts();
        },
      });
    }, "finalAnimation");
    mainTl.add("pauseAfterZoom", ">" + pauseAfterZoom);
  }
  function siteLoaderType11(siteLoader, siteLoaderDuration) {
    var progressEase = siteLoader.getAttribute("data-progress-ease");
    var progressExitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-progress-exit-fade-duration")
    );
    var progressExitFadeEase = siteLoader.getAttribute(
      "data-progress-exit-fade-ease"
    );
    var slidesDuration = parseFloat(
      siteLoader.getAttribute("data-slides-duration")
    );
    var slidesEase = siteLoader.getAttribute("data-slides-ease");
    gsap.from(".nb-site-loader--type11__loader", siteLoaderDuration, {
      top: "100%",
      ease: progressEase,
    });
    gsap.to(
      ".nb-site-loader--type11__loader-wrapper, .nb-site-loader--type11__pre-loader",
      progressExitFadeDuration,
      {
        opacity: 0,
        display: "none",
        ease: progressExitFadeEase,
        delay: siteLoaderDuration - 0.5,
      },
      "-=1"
    );
    gsap.to(".nb-site-loader--type11__clipper-left", slidesDuration, {
      delay: siteLoaderDuration - 0.5,
      clipPath: "inset(0 100% 0 0)",
      ease: slidesEase,
    });
    gsap.to(".nb-site-loader--type11__clipper-right", slidesDuration, {
      delay: siteLoaderDuration - 0.5,
      clipPath: "inset(0 0 0 100%)",
      ease: slidesEase,
      onComplete: () => {
        gsap.to(siteLoader, {
          display: "none",
          duration: 0,
          onComplete: () => {
            runScripts();
          },
        });
      },
    });
  }
  function siteLoaderType12(siteLoader, siteLoaderDuration) {
    var progressEase = siteLoader.getAttribute("data-progress-ease");
    var progressExitFadeDuration = parseFloat(
      siteLoader.getAttribute("data-exit-fade-duration")
    );
    var progressExitFadeEase = siteLoader.getAttribute("data-exit-fade-ease");
    var progressFrom = siteLoader.getAttribute("data-progress-from");
    var widthFrom;
    var widthTo;
    var heightFrom;
    var heightTo;
    if (progressFrom === "left") {
      widthFrom = 0;
      widthTo = "100%";
      heightFrom = "100%";
      heightTo = "100%";
    } else if (progressFrom === "top") {
      widthFrom = "100%";
      widthTo = "100%";
      heightFrom = 0;
      heightTo = "100%";
    }
    gsap.fromTo(
      ".nb-site-loader--type12__logo-fill",
      siteLoaderDuration,
      { width: widthFrom, height: heightFrom },
      {
        width: widthTo,
        height: heightTo,
        ease: progressEase,
        onComplete: () => {
          gsap.to(siteLoader, progressExitFadeDuration, {
            opacity: 0,
            ease: progressExitFadeEase,
            onComplete: () => {
              gsap.to(siteLoader, {
                display: "none",
                duration: 0,
                onComplete: () => {
                  runScripts();
                },
              });
            },
          });
        },
      }
    );
  }
  function runScripts() {
    if (document.querySelector(".bc-blade-title")) {
      blade_title();
    }
    if (document.querySelector(".bc-scribble-title")) {
      scribbletitle();
    }
    if (document.querySelector(".bc-counter")) {
      bc_counter();
    }
    if (document.querySelector(".bc-decode-reveal")) {
      decode_reveal();
    }
    if (document.querySelector(".next-spotlight-v2")) {
      next_spotlight_v2();
    }
    if (document.querySelector(".next-lamp")) {
      next_lamp();
    }
    if (document.querySelector(".next-counter-v2")) {
      next_counter_v2();
    }
    if (document.querySelector(".bc-divider")) {
      bc_divider();
    }
    if (document.querySelector(".bc-img-reveal")) {
      image_reveal();
    }
    if (document.querySelector(".bc-letter-launcher")) {
      letter_launcher();
    }
    if (document.querySelector(".bc-random-letters")) {
      random_letters();
    }
    if (document.querySelector(".next-blur-reveal")) {
      next_blur_reveal();
    }
    if (document.querySelector(".bc-unfold-reveal")) {
      unfoldreveal();
    }
    if (document.querySelector(".bc-twist-title")) {
      twist_title();
    }
    if (document.querySelector(".bc-svg-title")) {
      svgtitle();
    }
    if (document.querySelector(".nb-image-reveal-v2")) {
      next_image_reveal_v2();
    }
    if (document.querySelector(".nb-image-reveal-v3")) {
      next_image_reveal_v3();
    }
    if (document.querySelector(".nb-image-reveal-v4")) {
      next_image_reveal_v4();
    }
    if (document.querySelector(".nb-highlight")) {
      next_highlight();
    }
    animationsFrontend();
    if (document.querySelector('[data-barba="container"]')) {
      pageTransitionsFrontend();
    }
  }
}
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && next_site_loader();
});

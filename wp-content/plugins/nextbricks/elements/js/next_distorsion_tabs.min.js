function next_distorsion_tabs() {
  document
    .querySelectorAll(".next-distorsion-tabs")
    .forEach((distorsionTabs) => {
      const distorsionDuration = parseFloat(
        distorsionTabs.getAttribute("data-duration")
      );
      const distorsionEase = distorsionTabs.getAttribute("data-ease");
      const activeTab =
        parseFloat(distorsionTabs.getAttribute("data-activetab")) - 1;
      const event = distorsionTabs.getAttribute("data-event");
      const svgFilter = distorsionTabs.querySelector("#svg-distortion-filter");
      const svgFilterTurbulence = svgFilter.querySelector("feTurbulence");
      const svgFilterDisplacementMap =
        svgFilter.querySelector("feDisplacementMap");
      const figures = distorsionTabs.querySelector(
        ".next-distorsion-tabs__tabs"
      );
      const figure = figures.querySelectorAll(".next-distorsion-tabs__tab");
      const navs = distorsionTabs.querySelector(".next-distorsion-tabs__nav");
      const nav = navs.querySelectorAll(".next-distorsion-tabs__nav-item");
      let lastActiveItem = activeTab;
      const setActiveItem = (index) => {
        figure.forEach((el, i) => {
          el.classList.toggle("next-distorsion-tabs__tab--active", index === i);
          nav[i].classList.toggle(
            "next-distorsion-tabs__nav-item--active",
            index === i
          );
        });
        makeDisplace();
        lastActiveItem = index;
      };
      const makeDisplace = () => {
        const tl = gsap.timeline();
        gsap.killTweensOf(svgFilterDisplacementMap);
        tl.set(
          svgFilterTurbulence,
          { attr: { seed: gsap.utils.random(2, 150) } },
          0
        );
        tl.to(
          svgFilterDisplacementMap,
          { attr: { scale: gsap.utils.random(80, 120) }, duration: 0.2 },
          0
        );
        tl.to(
          svgFilterDisplacementMap,
          {
            attr: { scale: 1 },
            duration: distorsionDuration,
            ease: distorsionEase,
          },
          0.2
        );
      };
      nav.forEach((el, index) => {
        if (event === "hover") {
          el.addEventListener("mouseenter", function () {
            setActiveItem(index);
          });
        } else {
          el.addEventListener("click", function () {
            setActiveItem(index);
          });
        }
        el.addEventListener("keydown", function (e) {
          if (e.key === "Enter") {
            setActiveItem(index);
          }
        });
      });
      setActiveItem(activeTab);
    });
}
document.addEventListener("DOMContentLoaded", function (t) {
  bricksIsFrontend && next_distorsion_tabs();
});

function next_scrolling_background() {
  var scrollTriggers = [];
  scrollTriggers.forEach((trigger) => trigger.kill());
  scrollTriggers = [];
  document
    .querySelectorAll(".nb-scrolling-background")
    .forEach((scrollingBackground) => {
      var colors = scrollingBackground.getAttribute("data-colors").split(",");
      var offset = scrollingBackground.offsetHeight / colors.length;
      var duration = parseFloat(
        scrollingBackground.getAttribute("data-duration")
      );
      var ease = scrollingBackground.getAttribute("data-ease");
      var transition = scrollingBackground.getAttribute("data-transition");
      function convertToPixels(value) {
        if (typeof value === "number") {
          return value;
        }
        const unit = value.match(/[a-z%]+$/i)[0];
        const number = parseFloat(value);
        switch (unit) {
          case "px":
            return number;
          case "vh":
            return (number / 100) * window.innerHeight;
          case "svh":
            return (number / 100) * window.innerHeight;
          case "vw":
            return (number / 100) * window.innerWidth;
          case "svw":
            return (number / 100) * window.innerWidth;
          case "%":
            return (number / 100) * window.innerHeight;
          default:
            console.warn(
              `Unit ${unit} is not supported on the Offset control on Scrolling Background element.`
            );
            return number;
        }
      }
      var offsetInPixels = convertToPixels(offset);
      colors.forEach((color, index) => {
        var trigger = ScrollTrigger.create({
          trigger: scrollingBackground,
          start: `${index * offsetInPixels}px top`,
          end: `${(index + 1) * offsetInPixels}px top`,
          onEnter: () => {
            if (transition === "fade") {
              gsap.to(scrollingBackground, {
                backgroundColor: color,
                duration: duration,
                ease: ease,
              });
            }
          },
          onEnterBack: () => {
            if (transition === "fade") {
              gsap.to(scrollingBackground, {
                backgroundColor: color,
                duration: duration,
                ease: ease,
              });
            }
          },
          onUpdate: (self) => {
            if (transition === "progressive") {
              const progress = self.progress;
              const nextColor = colors[index + 1] || colors[index];
              gsap.to(scrollingBackground, {
                backgroundColor: gsap.utils.interpolate(
                  color,
                  nextColor,
                  progress
                ),
                duration: 0,
                ease: ease,
              });
            }
          },
        });
        scrollTriggers.push(trigger);
      });
    });
}
document.addEventListener("DOMContentLoaded", function (t) {
  setTimeout(() => {
    bricksIsFrontend && next_scrolling_background();
    window.addEventListener("resize", function () {
      next_scrolling_background();
    });
  }, 300);
});

function next_thumbnail_slider() {
  document.querySelectorAll(".nb-thumbnail-slider").forEach((slider) => {
    slider.removeAttribute("data-flickering");
    var SCROLL_DURATION = parseFloat(
      slider.getAttribute("data-scroll-duration")
    );
    var SCROLL_EASE = slider.getAttribute("data-scroll-ease");
    var SELECTOR_DURATION = parseFloat(
      slider.getAttribute("data-selector-duration")
    );
    var SELECTOR_EASE = slider.getAttribute("data-selector-ease");
    var thumbContainer = slider.querySelector(
      ".nb-thumbnail-slider__thumb-container"
    );
    var mainImage = slider.querySelector(".nb-thumbnail-slider__main-image");
    var selector = slider.querySelector(".nb-thumbnail-slider__selector");
    var thumbs = Array.from(
      slider.querySelectorAll(".nb-thumbnail-slider__thumb")
    );
    if (thumbs.length > 0) {
      mainImage.setAttribute("src", thumbs[0].getAttribute("src"));
      mainImage.setAttribute("data-test", "test");
    }
    function moveSelector(toThumb) {
      gsap.to(selector, {
        x: toThumb.offsetLeft,
        y: toThumb.offsetTop,
        duration: SELECTOR_DURATION,
        ease: SELECTOR_EASE,
      });
    }
    function scrollThumbnailIntoView(thumb) {
      var cw = thumbContainer.clientWidth;
      var sw = thumbContainer.scrollWidth;
      var sl = thumbContainer.scrollLeft;
      var containerLeft = sl;
      var containerRight = sl + cw;
      var idx = thumbs.indexOf(thumb);
      var prev = thumbs[idx - 1] || null;
      var next = thumbs[idx + 1] || null;
      if (idx === 0) {
        gsap.to(thumbContainer, {
          scrollTo: { x: 0 },
          duration: SCROLL_DURATION,
          ease: SCROLL_EASE,
        });
        return;
      }
      if (idx === thumbs.length - 1) {
        gsap.to(thumbContainer, {
          scrollTo: { x: sw - cw },
          duration: SCROLL_DURATION,
          ease: SCROLL_EASE,
        });
        return;
      }
      if (next) {
        var visibleNext = containerRight - next.offsetLeft;
        if (visibleNext < next.clientWidth / 2) {
          let target = next.offsetLeft + next.clientWidth / 2 - cw;
          target = Math.max(0, Math.min(target, sw - cw));
          gsap.to(thumbContainer, {
            scrollTo: { x: target },
            duration: SCROLL_DURATION,
            ease: SCROLL_EASE,
          });
          return;
        }
      }
      if (prev) {
        var visiblePrev = prev.offsetLeft + prev.clientWidth - containerLeft;
        if (visiblePrev < prev.clientWidth / 2) {
          let target = prev.offsetLeft + prev.clientWidth / 2;
          target = Math.max(0, Math.min(target, sw - cw));
          gsap.to(thumbContainer, {
            scrollTo: { x: target },
            duration: SCROLL_DURATION,
            ease: SCROLL_EASE,
          });
          return;
        }
      }
    }
    thumbs.forEach((thumb) => {
      thumb.addEventListener("click", () => {
        updateMainImage(thumb);
      });
      thumb.addEventListener("keydown", (e) => {
        if (e.key === "Enter") thumb.click();
      });
    });
    function updateMainImage(thumb) {
      mainImage.src = thumb.src;
      slider
        .querySelector(".nb-thumbnail-slider__thumb--active")
        .classList.remove("nb-thumbnail-slider__thumb--active");
      thumb.classList.add("nb-thumbnail-slider__thumb--active");
      moveSelector(thumb);
      scrollThumbnailIntoView(thumb);
    }
    slider
      .querySelector(".nb-thumbnail-slider__arrow--left")
      .addEventListener("click", () => {
        var activeIndex = thumbs.findIndex((thumb) =>
          thumb.classList.contains("nb-thumbnail-slider__thumb--active")
        );
        if (activeIndex > 0) {
          updateMainImage(thumbs[activeIndex - 1]);
        }
      });
    slider
      .querySelector(".nb-thumbnail-slider__arrow--right")
      .addEventListener("click", () => {
        var activeIndex = thumbs.findIndex((thumb) =>
          thumb.classList.contains("nb-thumbnail-slider__thumb--active")
        );
        if (activeIndex < thumbs.length - 1) {
          updateMainImage(thumbs[activeIndex + 1]);
        }
      });
    slider
      .querySelector(".nb-thumbnail-slider__arrow--left")
      .addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          var activeIndex = thumbs.findIndex((thumb) =>
            thumb.classList.contains("nb-thumbnail-slider__thumb--active")
          );
          if (activeIndex > 0) {
            updateMainImage(thumbs[activeIndex - 1]);
          }
        }
      });
    slider
      .querySelector(".nb-thumbnail-slider__arrow--right")
      .addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          var activeIndex = thumbs.findIndex((thumb) =>
            thumb.classList.contains("nb-thumbnail-slider__thumb--active")
          );
          if (activeIndex < thumbs.length - 1) {
            updateMainImage(thumbs[activeIndex + 1]);
          }
        }
      });
    gsap.set(thumbContainer, { scrollLeft: 0 });
    var inicial = slider.querySelector(".nb-thumbnail-slider__thumb--active");
    if (inicial) moveSelector(inicial);
  });
}
document.addEventListener("DOMContentLoaded", function (t) {
  var isBricks = window.location.href.includes("brickspreview");
  if (isBricks) {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.addedNodes.length) {
          mutation.addedNodes.forEach((node) => {
            if (
              node.classList &&
              node.classList.contains("nb-thumbnail-slider__thumb--active")
            ) {
              setTimeout(() => {
                next_thumbnail_slider();
              }, 100);
            }
          });
        }
      });
    });
    observer.observe(document.body, { childList: !0, subtree: !0 });
  } else if (bricksIsFrontend) {
    next_thumbnail_slider();
  }
});
